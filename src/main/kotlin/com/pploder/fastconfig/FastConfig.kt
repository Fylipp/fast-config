package com.pploder.fastconfig

import java.io.*
import java.util.*
import kotlin.reflect.KClass
import kotlin.reflect.full.memberProperties

const val defaultConfigFile = "config.properties"

/**
 * Base class for configuration files.
 */
abstract class FastConfig {
    init {
        if (!this.javaClass.kotlin.isData) {
            throw FastConfigException("Configuration class has to be a data class")
        }
    }

    companion object {
        /**
         * Loads a configuration from a properties instance.
         *
         * @param clazz The configuration class
         * @param props The properties to use
         */
        fun <T : FastConfig> loadFromProperties(clazz: KClass<T>, props: Properties): T {
            val ctor = clazz.constructors.first()

            val args = ctor.parameters.flatMap {
                val value = read<Any>(props, it)

                if (value is MappedArgument.Value) {
                    listOf(Pair(it, value.value))
                } else {
                    listOf()
                }
            }

            return ctor.callBy(mapOf(*args.toTypedArray()))
        }

        /**
         * Loads a configuration from an absolute location in the classpath.
         *
         * @param clazz The configuration class
         * @param path The classpath, defaults to [defaultConfigFile]
         */
        fun <T : FastConfig> loadFromAbsoluteClasspath(clazz: KClass<T>, path: String = defaultConfigFile): T =
                loadFromRelativeClasspath(clazz, "/$path")

        /**
         * Loads a configuration from a classpath location relative to the configuration class.
         *
         * @param clazz The configuration class
         * @param relativePath The relative classpath, defaults to [defaultConfigFile]
         */
        fun <T : FastConfig> loadFromRelativeClasspath(clazz: KClass<T>, relativePath: String = defaultConfigFile): T =
                loadFromStream(clazz, clazz.java.getResourceAsStream(relativePath))

        /**
         * Loads a configuration from a stream.
         *
         * @param clazz The configuration class
         * @param stream The input stream to load the configuration from
         */
        fun <T : FastConfig> loadFromStream(clazz: KClass<T>, stream: InputStream): T {
            val props = Properties()
            props.load(stream)

            return loadFromProperties(clazz, props)
        }

        /**
         * Loads a configuration from a reader.
         *
         * @param clazz The configuration class
         * @param reader The reader to load the configuration from
         */
        fun <T : FastConfig> loadFromReader(clazz: KClass<T>, reader: Reader): T {
            val props = Properties()
            props.load(reader)

            return loadFromProperties(clazz, props)
        }

        /**
         * Loads a configuration from a file.
         *
         * @param clazz The configuration class
         * @param file The file to load the configuration from
         */
        fun <T : FastConfig> loadFromFile(clazz: KClass<T>, file: File): T =
                loadFromStream(clazz, file.inputStream())

        /**
         * Loads a configuration from a file.
         *
         * @param clazz The configuration class
         * @param file The name of the file to load the configuration from, defaults to [defaultConfigFile]
         */
        fun <T : FastConfig> loadFromFile(clazz: KClass<T>, file: String = defaultConfigFile): T =
                loadFromFile(clazz, File(file))
    }

    open val comment = "Generated by fast-config: https://github.com/Fylipp/fast-config"

    /**
     * Store the configuration in a properties instance.
     */
    fun saveToProperties(): Properties {
        val props = Properties()

        javaClass.kotlin.memberProperties.forEach {
            write(it.get(this), props, it)
        }

        return props
    }

    /**
     * Write the configuration to a stream.
     */
    fun saveToStream(stream: OutputStream) = saveToProperties().store(stream, comment)

    /**
     * Write the configuration to a writer.
     */
    fun saveToWriter(writer: Writer) = saveToProperties().store(writer, comment)

    /**
     * Write the configuration to a file.
     */
    fun saveToFile(file: File) = saveToStream(file.outputStream())

    /**
     * Write the configuration to a file (defaults to [defaultConfigFile]).
     */
    fun saveToFile(file: String = defaultConfigFile) = saveToFile(File(file))
}
